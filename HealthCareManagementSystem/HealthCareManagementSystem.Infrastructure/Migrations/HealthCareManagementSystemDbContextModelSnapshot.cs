// <auto-generated />
using System;
using HealthCareManagementSystem.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthCareManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(HealthCareManagementSystemDbContext))]
    partial class HealthCareManagementSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DoctorId1")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientId1")
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("SlotEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SlotStart")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientId1");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2025, 7, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = "D001",
                            PatientId = "P001",
                            SlotEnd = new TimeSpan(0, 10, 30, 0, 0),
                            SlotStart = new TimeSpan(0, 10, 0, 0, 0),
                            Status = "Scheduled"
                        });
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.Doctor", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AppointmentsDone")
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Bio")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactNum")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Qualification")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("WorkEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkStart")
                        .HasColumnType("time");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = "D001",
                            AppointmentsDone = 300,
                            Available = true,
                            Bio = "Cardiologist with 8 years of experience",
                            ContactNum = "9876543210",
                            Department = "Cardiology",
                            Email = "ananya@hospital.com",
                            ExperienceYears = 8,
                            FullName = "Dr. Ananya Sharma",
                            IsApproved = true,
                            Qualification = "MBBS, MD",
                            WorkEnd = new TimeSpan(0, 17, 0, 0, 0),
                            WorkStart = new TimeSpan(0, 9, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DoctorId1")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientId1")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Prescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientId1");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            MedicalRecordId = 1,
                            AppointmentId = 1,
                            Diagnosis = "High Blood Pressure",
                            DoctorId = "D001",
                            Notes = "Monitor BP daily",
                            PatientId = "P001",
                            Prescription = "Amlodipine 5mg",
                            RecordDate = new DateTime(2025, 7, 12, 4, 25, 59, 375, DateTimeKind.Utc).AddTicks(2540)
                        });
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Age")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNum")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = "P001",
                            Age = new DateTime(1990, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactNum = "9123456780",
                            Email = "amit.patel@example.com",
                            FullName = "Amit Patel",
                            Gender = "Male"
                        });
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "admin001",
                            CreatedAt = new DateTime(2025, 7, 12, 4, 25, 59, 374, DateTimeKind.Utc).AddTicks(9080),
                            Password = "admin@123",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("HealthCareManagementSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCareManagementSystem.Domain.Entities.Doctor", null)
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId1");

                    b.HasOne("HealthCareManagementSystem.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCareManagementSystem.Domain.Entities.Patient", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId1");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("HealthCareManagementSystem.Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("HealthCareManagementSystem.Domain.Entities.Doctor", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.MedicalRecord", b =>
                {
                    b.HasOne("HealthCareManagementSystem.Domain.Entities.Appointment", "Appointment")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("HealthCareManagementSystem.Domain.Entities.MedicalRecord", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCareManagementSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCareManagementSystem.Domain.Entities.Doctor", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorId1");

                    b.HasOne("HealthCareManagementSystem.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCareManagementSystem.Domain.Entities.Patient", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId1");

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.Patient", b =>
                {
                    b.HasOne("HealthCareManagementSystem.Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("HealthCareManagementSystem.Domain.Entities.Patient", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("HealthCareManagementSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
